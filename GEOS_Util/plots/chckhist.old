#!/bin/csh -f

set EXPORT   = $1
set GC       = $2

if( .$3 == . ) then
     set source = $SOURCE
else
     set source = $3
endif
set base = `basename $source`
set arch = `uname`

# Set Defaults
# ------------
set expdsc = NULL
set alias  = NULL
set output = NULL
set format = NULL
set scale  = 1.0


# Create true comma-separated HISTORY variable
# --------------------------------------------
if(! -e HISTORY.T ) then
   cat $HISTORYRC | sed -e 's/,/ , /g' > HISTORY.T
endif
    set HISTORY  = `cat  HISTORY.T`
    set numwords =     $#HISTORY


# Find Experiment Description
# ---------------------------
@ n = 0
      @ numword  = 1
while( $numword <= $numwords )
       set word = $HISTORY[$numword]
      @ numword = $numword + 1
@ n = $n + 1
@ m = $n + 1
if( $word == EXPDSC: )  then
     set expdsc = $HISTORY[$m]
endif
end


# Find Output Streams
# -------------------
@ n = 0
@ m = 0
set loc_output = ""
      @ numword  = 1
while( $numword <= $numwords )
       set word = $HISTORY[$numword]
      @ numword = $numword + 1
@ n = $n + 1
set  filename = `echo $word | cut -d "%" -f2`
if( $filename == filename: )  then
@ k = $n + 1
@ m = $m + 1
set loc_output = `echo $loc_output $k`
endif
end
set   num_output = $#loc_output



# Find Aliases (Note: cat -E puts a "$" at end of each line)
# ----------------------------------------------------------
if( $arch == 'IRIX64' ) set catargs = "-ve"
if( $arch == 'Linux'  ) set catargs = "-E"
if( $arch == 'OSF1'   ) set catargs = "-E"
set   temp = `cat $catargs HISTORY.T | grep "'${EXPORT}'" | grep "'${GC}'"`

# Test if EXPORT Exists within HISTORY.rc
# ---------------------------------------

if( $#temp > 0 ) then

# Find First End-of-Line from Possible Multiple Output Streams
# ------------------------------------------------------------
set string   = ""
set lastword = false
foreach word ($temp)
if( $lastword != true ) then
        set newword = ""
@             n = 1
        set bit = `echo $word | cut -b $n`
        while( "${bit}" != '' )
           if( "${bit}" != '$' ) then
                   set newword  = `echo ${newword}${bit}`
           else
                   set lastword = true
           endif
@             n = $n + 1
        set bit = `echo $word | cut -b $n`
        end
set string = `echo $string $newword`
endif
end 

# Check if EXPORT is first output variable
# ----------------------------------------
set  first =  `echo $string[1] | cut -c1-4`
if( $first == 'list' ) shift string

# Ensure STRING is true comma-separated
# -------------------------------------
set newstring = ""
foreach word ($string)
  set firstbit = `echo $word | cut -b 1`
  set newstring  = `echo ${newstring} ${firstbit}`

  set bit = `echo $word | cut -b 2`
  if( "${bit}" != "" ) then
       if( "${firstbit}" == ',' ) then
          set newstring = `echo ${newstring} ${bit}`
       else
          set newstring = `echo ${newstring}${bit}`
       endif
  endif

@ n = 3
  set bit = `echo $word | cut -b $n`
  while( "${bit}" != '' )
       if( "${bit}" == ',' ) then
          set newstring = `echo ${newstring} ${bit}`
       else
          set newstring = `echo ${newstring}${bit}`
       endif
@               n = $n + 1
          set bit = `echo $word | cut -b $n`
  end
end
set string = `echo $newstring`

# Set Alias and Scale Factor
# --------------------------
if( $#string == 4 ) set  alias = $EXPORT
if( $#string == 6 ) then
                    set  alias = `echo $string[5]`
                    set  alias = `echo $alias | cut -d "'" -f2`
endif
if( $#string >= 7 ) then
                    set  alias = `echo $string[5]`
                    set  alias = `echo $alias | cut -d "'" -f2`
                    set  scale = `echo $string[7]`
endif

# Loop to Associate EXPORT with particular Output Stream
# ------------------------------------------------------
@ n = 0
      @ numword  = 1
while( $numword <= $numwords )
       set word = $HISTORY[$numword]
       set xxxx = `echo $word | cut -d "'" -f2`
      @ numword = $numword + 1
      @ n = $n + 1

# Test for EXPORT detected
# ------------------------
if( $xxxx == $EXPORT ) then

    @ m = $n + 2
    @ k = $n + 4
    if( $#string  == 4 ) then
        if( "'${GC}'" == $HISTORY[$m] ) then
            @ i =  $num_output
            while( $loc_output[$i] > $m )
            @ i =  $i - 1
            end
            set output = `echo $HISTORY[$loc_output[$i]] | cut -d "'" -f2`
        endif
    else
        if( "'${GC}'"    == $HISTORY[$m] && \
            "'${alias}'" == $HISTORY[$k] ) then
            @ i =  $num_output
            while( $loc_output[$i] > $m )
            @ i =  $i - 1
            end
            set output = `echo $HISTORY[$loc_output[$i]] | cut -d "'" -f2`
        endif
    endif

# Remove Template Syntax from Output Stream Name
# ----------------------------------------------
    set stream = $output
    set output = ""
    @   L = 1
    set node = `echo $stream | cut -d "." -f$L`
    while( "${node}" != '' )
      set   add_node = TRUE
            @ j = 1
        set bit = `echo $node | cut -b $j`
        while( "${bit}" != ''  )
           if( "${bit}" != '%' ) then
                  @ j = $j + 1
                  set bit = `echo $node | cut -b $j`
           else
                  set add_node = FALSE
                  set bit = ''
           endif
        end
        if( ${add_node} == 'TRUE' ) then
             if( "${output}" == '' ) then
               set  output = ${node}
             else
               set  output = `echo ${output}.${node}`
             endif
        endif
      @ L = $L + 1
      set node = `echo $stream | cut -d "." -f$L`
      if( $node == ${output} ) set node = ''
    end

# Test for Output File detected
# -----------------------------
    if( $output != 'NULL' && "'${GC}'" == $HISTORY[$m] ) then
        set output = `echo ${source}/${output}/xdf.tabl` 

# Check for File Format
# ---------------------
        set format0 = $format
        @ m = $loc_output[$i]
        while ( $m < $n )
           set  parse = `echo $HISTORY[$m] | cut -d % -f 2`
           if( $parse == format: )  then
                @ m = $m + 1
                set format0 = $HISTORY[$m]
                @ m = $n
           else
                @ m = $m + 1
           endif
        end
        set format = ""
      @ j = 1
        set bit = `echo $format0 | cut -b $j`
        while( "${bit}" != '' )
           if( "${bit}" != "'" ) then
              set format = `echo ${format}${bit}`
           endif
          @      j = $j + 1
           set bit = `echo $format0 | cut -b $j`
        end

# Check for DDF File
# ------------------
        set DDF = NULL
        @ m = $loc_output[$i]
        while ( $m < $n )
           set  parse = `echo $HISTORY[$m] | cut -d % -f 2`
           if( $parse == grads_ddf: )  then
                @ m = $m + 1
                set DDF = $HISTORY[$m]
                @ m = $n
           else
                @ m = $m + 1
           endif
        end
        if( $DDF != 'NULL' ) then
             set output = ""
           @ j = 1
             set bit = `echo $DDF | cut -b $j`
             while( "${bit}" != '' )
                if( "${bit}" != "'" ) then
                   set output = `echo ${output}${bit}`
                endif
              @      j = $j + 1
               set bit = `echo $DDF | cut -b $j`
             end
             if( $format == 'NULL' ) set format = CFIO
        endif

# Check for CTL File
# ------------------
        set CTL = NULL
        @ m = $loc_output[$i]
        while ( $m < $n )
           set  parse = `echo $HISTORY[$m] | cut -d % -f 2`
           if( $parse == grads_ctl: )  then
                @ m = $m + 1
                set CTL = $HISTORY[$m]
                @ m = $n
           else
                @ m = $m + 1
           endif
        end
        if( $CTL != 'NULL' ) then
             set output = ""
           @ j = 1
             set bit = `echo $CTL | cut -b $j`
             while( "${bit}" != '' )
                if( "${bit}" != "'" ) then
                   set output = `echo ${output}${bit}`
                endif
              @      j = $j + 1
               set bit = `echo $CTL | cut -b $j`
             end
             if( $format == 'NULL' ) set format = flat
        endif

# End Test for Output File detected
# -----------------------------
    endif

# End Test for EXPORT detected
# ----------------------------
endif

# End Loop to Associate EXPORT with particular Output Stream
# ----------------------------------------------------------
end


# End test for Existence of EXPORT within HISTORY.rc
# --------------------------------------------------
endif



# Export Results
# --------------
setenv EXPDSC $expdsc
setenv ALIAS  $alias
setenv OUTPUT $output
setenv FORMAT $format
setenv BASE   $base

        echo '   '
        echo "Number of History Output Streams: $num_output"
if( $EXPORT == $ALIAS ) then 
        echo "                           Found: $EXPORT from GC: $GC"
        echo "                      CTL or DDF: ${OUTPUT}"
        echo "                          Format: ${FORMAT}"
        echo "                         Scaling: $scale"
else
        echo "                           Found: $EXPORT (aka: ${ALIAS}) from GC: $GC"
        echo "                      CTL or DDF: ${OUTPUT}"
        echo "                          Format: ${FORMAT}"
        echo "                         Scaling: $scale"
endif
        echo '   '

if( -e hist.txt ) /bin/rm hist.txt
touch hist.txt
echo $expdsc >> hist.txt
echo $alias  >> hist.txt
echo $output >> hist.txt
echo $scale  >> hist.txt
echo $FORMAT >> hist.txt
echo $base   >> hist.txt

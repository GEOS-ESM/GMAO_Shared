#!/bin/csh -f

set EXPORT   = $1
set GC       = $2

if( .$3 == . ) then
     set source = $SOURCE
else
     set source = $3
endif
set arch = `uname`

# Set Defaults
# ------------
set expdsc = NULL
set alias  = NULL
set output = NULL
set format = flat
set scale  = 1.0
set DOLLAR = '$'

#######################################################################

set           FILE = strip
/bin/rm -f   $FILE
cat << EOF > $FILE
#!/bin/ksh
/bin/mv \$1 \$1.tmp
touch   \$1
while read line
do
echo \$line >> \$1
done < \$1.tmp
exit
EOF
chmod +x $FILE

#######################################################################

# Check for SUFFIX appended to EXPORT (as EXPORT:SUFFIX)
# ------------------------------------------------------
set SUFFIX = `echo $EXPORT | grep : | cut -d: -f2`
set EXPORT = `echo $EXPORT          | cut -d: -f1`

#######################################################################

# Create true comma-separated HISTORY variable
# --------------------------------------------
if(! -e HISTORY.T ) then
   cat $HISTORYRC | sed -e 's/,/ , /g' | sed -e 's/*/@/g' | sed -e 's/?/ /g' > HISTORY.T
endif

./strip HISTORY.T

    set expid    = `grep EXPID:  HISTORY.T | cut -d: -f2`
    set expdsc   = `grep EXPDSC: HISTORY.T | cut -d: -f2`
    set expid    = `echo $expid`  # to remove preceding blanks
    set expdsc   = `echo $expdsc` # to remove preceding blanks

    set HISTORY  = `cat  HISTORY.T`

#######################################################################
#              Find and Split HISTORY Collections 
#######################################################################

# Define Collections
# ------------------
set     collections = `$GEOSUTIL/post/get_streams HISTORY.T`
set num_collections = $#collections

# ---------------------------------
# csplit file based on :: delimiter
# ---------------------------------
# Note we need the +1 so that we keep the :: at the end

csplit HISTORY.T '/:: *$/+1' '{*}' --prefix=possible_collection > /dev/null

# Now we need the actual "collection" bits

set finalcolls = ''
foreach collection ($collections)
   #echo "Checking for $collection..."
   foreach file (`/bin/ls possible_collection*`)
      grep "$collection.fields" $file > /dev/null
      if ($status == 0) then

         # If we found collection.fields, then it's a collection bit...
         # echo "Found $collection.fields in $file"
         /bin/mv $file TMP.$collection.rcx

         # This removes any fluff at the top of a file
         sed -n "/$collection/,${DOLLAR}p" TMP.$collection.rcx > $collection.rcx

         set finalcolls = `echo $finalcolls $collection`
      endif
   end
end
# Remove failed files
/bin/rm possible_collection*

# Remove TMP files
/bin/rm TMP*

#######################################################################
#######################################################################

set found = FALSE
foreach collection ($finalcolls)
    strip  ${collection}.rcx

    foreach line ("`cat ${collection}.rcx`")

       set  string = `echo $line | awk '{print $1}'`

       if( $string =~ ${collection}.* ) then
           if( $string == ${collection}.format: ) set FORMAT = `echo $line | cut -d" " -f2 | sed -e "s/'//g"`
           if( $string != ${collection}.fields: ) continue
               set QEXPORT = `echo $line | awk '{print $2}'`
               set QGC     = `echo $line | awk '{print $4}'`
               set QALIAS  = `echo $line | awk '{print $6}'`
               set QSCALE  = `echo $line | awk '{print $8}'`
       else
               set QEXPORT = `echo $line | awk '{print $1}'`
               set QGC     = `echo $line | awk '{print $3}'`
               set QALIAS  = `echo $line | awk '{print $5}'`
               set QSCALE  = `echo $line | awk '{print $7}'`
       endif

                           set QGC    = `echo $QGC | sed -e "s/'//g"`
       if( .$QSCALE == . ) set QSCALE = 1.0

    #  echo LINE: $line
    #  echo QALIAS: $QALIAS  SUFFIX: $SUFFIX
    #  echo " "

    #  CASE 1:  SUFFIX = ''
    #           This is the traditional case following original GOCART/GOCART_2G standards
    #  -----------------------------------------------------------------------------------
       if( .$SUFFIX == . ) then
            if( .$QALIAS == . )  set QALIAS = $QEXPORT
            set  XEXPORT = `echo $QEXPORT            | cut -d";" -f1 | sed -e "s/'//g"`
            set  YEXPORT = `echo $QEXPORT | grep ";" | cut -d";" -f2 | sed -e "s/'//g"`
            set  XALIAS  = `echo $QALIAS             | cut -d";" -f1 | sed -e "s/'//g"`
            set  YALIAS  = `echo $QALIAS  | grep ";" | cut -d";" -f2 | sed -e "s/'//g"`

            if( "$EXPORT"  == "$XEXPORT" && $GC == $QGC ) then
                 set found  = TRUE
                 set alias  = $XALIAS
                 set scale  = $QSCALE
                 set hisout = $collection
                 echo "COLLECTION: $hisout   EXPORT: $XEXPORT GC: $QGC  ALIAS: $alias  SCALE: $scale  SUFFIX: $SUFFIX"
                 break
            endif
            if( "$EXPORT"  == "$YEXPORT" && $GC == $QGC ) then
                 set found  = TRUE
                 set alias  = $YALIAS
                 set scale  = $QSCALE
                 set hisout = $collection
                 echo "COLLECTION: $hisout   EXPORT: $YEXPORT GC: $QGC  ALIAS: $alias  SCALE: $scale  SUFFIX: $SUFFIX"
                 break
            endif
       endif

    #  CASE 2:  SUFFIX != ''
    #           This implies use of GOCART_2G requiring ALT_EXPORTS (Note: scalars only, no Aerosol vector exports)
    #  ------------------------------------------------------------------------------------------------------------
       if( .$SUFFIX != . ) then
            if( .$QALIAS == . ) then
                  set XEXPORT = `echo $QEXPORT                         | sed -e "s/'//g"`
                  set XALIAS  = `echo $QEXPORT                         | sed -e "s/'//g"`${SUFFIX} # Append SUFFIX to EXPORT name
            else                    
                  set XEXPORT = `echo $QEXPORT                         | sed -e "s/'//g"`
                  set XALIAS  = `echo $QALIAS  | cut -d';' -f${SUFFIX} | sed -e "s/'//g"` # Select QALIAS based on SUFFIX Index
            endif
            if( "$EXPORT"  == "$XEXPORT" && $GC == $QGC ) then
                 set found  = TRUE
                 set alias  = $XALIAS
                 set scale  = $QSCALE
                 set hisout = $collection
                 echo "COLLECTION: $hisout   EXPORT: $XEXPORT GC: $QGC  ALIAS: $alias  SCALE: $scale  SUFFIX: $SUFFIX"
                 break
            endif
       endif

    end  # End Line Loop

    if( $found == TRUE ) break

end      # End Collection Loop

#######################################################################
#              Find HISTORY Collections 
#######################################################################

if(! $?TBEG )      set TBEG = "NULL"
if(! $?TEND )      set TEND = "NULL"
if(! $?PLOT_QUAD ) set PLOT_QUAD = "false"

# Find Collection Attributes (Note: Use xdf.tabl when SOURCE points to a CMPEXP)
# ------------------------------------------------------------------------------
#
#  Usage Priority
#  --------------
#        1) Use Environment Variable $DDFILE if it exists
#        2) Use climatological $SEAON.tabl (or $SEASON.ddf) file if it exist .AND. $TBEG = $TEND = NULL .AND. Environment Variable $CLIM = "true"
#        3) Use collection-based grads.ddf (or grads.ctl) attribute within HISTORY.rc if present
#        4) Use instantanious   xdf.tabl if it exists .AND. Environment Variable $CLIM = "false"
#        5) Use climatological clim.tabl if it exists .AND. $TBEG = $TEND = NULL .AND. $PLOT_QUAD == "false"
#        6) Use instantanious   xdf.tabl if it exists
#        7) Use climatological clim.tabl
#
# ------------------------------------------------------------------------------

if( $found == TRUE ) then
    set numseas = `echo $SEASONS`
    set collection = $hisout

  if( -e ${source}/${collection}/$DDFFILE ) then
      set dummy  = `echo ${source}/${collection}/$DDFFILE`
  else

    # Rules for Source Experiment
    # ---------------------------
    if( "$source" == "$SOURCE" ) then

        if(       $#numseas == 1 & ( $TBEG == "NULL" && $TEND == "NULL" )                   & ( -e ${source}/${collection}/`echo $SEASONS | tr "[:upper:]" "[:lower:]"`.tabl ) ) then
                  set dummy =                                                                      ${source}/${collection}/`echo $SEASONS | tr "[:upper:]" "[:lower:]"`.tabl
        else if ( $#numseas == 1 & ( $TBEG == "NULL" && $TEND == "NULL" )                   & ( -e ${source}/${collection}/`echo $SEASONS | tr "[:upper:]" "[:lower:]"`.ddf  ) ) then
                  set dummy =                                                                      ${source}/${collection}/`echo $SEASONS | tr "[:upper:]" "[:lower:]"`.ddf
        else
                                 set dummy  = `grep ${collection}.grads_ddf HISTORY.T | cut -d: -f2 | cut -d, -f1 | sed -e "s/'//g"`
            if( "$dummy" == "" ) set dummy  = `grep ${collection}.grads_ctl HISTORY.T | cut -d: -f2 | cut -d, -f1 | sed -e "s/'//g"`
            if( "$dummy" == "" ) then
                 if( -e ${source}/${collection}/xdf.tabl && $CLIM == "false" ) then
                                 set dummy  = `echo ${source}/${collection}/xdf.tabl`
     
                 else 
                      if( -e ${source}/${collection}/clim.tabl && ( $TBEG == "NULL" && $TEND == "NULL" && .$3 == "." && $PLOT_QUAD == "false" ) ) then
                                 set dummy  = `echo ${source}/${collection}/clim.tabl`
                      else
                               if( -e ${source}/${collection}/xdf.tabl ) then
                                      set dummy  = `echo ${source}/${collection}/xdf.tabl`
                               else
                                      set dummy  = `echo ${source}/${collection}/clim.tabl`
                               endif
                      endif
                 endif
            endif
     
        endif

    else

    # Rules for Comparison Experiment
    # -------------------------------
        if(       $#numseas == 1 & ( $TBEG == "NULL" && $TEND == "NULL" ) & $CLIM == "true" & ( -e ${source}/${collection}/`echo $SEASONS | tr "[:upper:]" "[:lower:]"`.tabl ) ) then
                  set dummy =                                                                      ${source}/${collection}/`echo $SEASONS | tr "[:upper:]" "[:lower:]"`.tabl
        else if ( $#numseas == 1 & ( $TBEG == "NULL" && $TEND == "NULL" ) & $CLIM == "true" & ( -e ${source}/${collection}/`echo $SEASONS | tr "[:upper:]" "[:lower:]"`.ddf  ) ) then
                  set dummy =                                                                      ${source}/${collection}/`echo $SEASONS | tr "[:upper:]" "[:lower:]"`.ddf
        else
                                 set dummy  = `grep ${collection}.grads_ddf HISTORY.T | cut -d: -f2 | cut -d, -f1 | sed -e "s/'//g"`
            if( "$dummy" == "" ) set dummy  = `grep ${collection}.grads_ctl HISTORY.T | cut -d: -f2 | cut -d, -f1 | sed -e "s/'//g"`
            if( "$dummy" == "" ) then
                 if( -e ${source}/${collection}/xdf.tabl && $CLIM == "false" ) then
                                 set dummy  = `echo ${source}/${collection}/xdf.tabl`
     
                 else 
                      if( -e ${source}/${collection}/clim.tabl && ( $TBEG == "NULL" && $TEND == "NULL" && .$3 == "." && $PLOT_QUAD == "false" ) ) then
                                 set dummy  = `echo ${source}/${collection}/clim.tabl`
                      else
                               if( -e ${source}/${collection}/xdf.tabl ) then
                                      set dummy  = `echo ${source}/${collection}/xdf.tabl`
                               else
                                      set dummy  = `echo ${source}/${collection}/clim.tabl`
                               endif
                      endif
                 endif
            endif
     
        endif

    endif

  endif
                          set output = `echo $dummy`

endif # Endif found=TRUE


#endif

# Export Results
# --------------
setenv EXPDSC $expdsc
setenv ALIAS  $alias
setenv OUTPUT $output
setenv FORMAT $format
setenv BASE   $expid

        echo '   '
        echo "Number of History Output Streams: $num_collections"
if( $EXPORT == $ALIAS ) then 
        echo "                          Source: $source"
        echo "                           Found: $EXPORT from GC: $GC"
        echo "                      CTL or DDF: ${OUTPUT}"
        echo "                          Format: ${FORMAT}"
        echo "                         Scaling: $scale"
else
        echo "                          Source: $source"
        echo "                           Found: $EXPORT (aka: ${ALIAS}) from GC: $GC"
        echo "                      CTL or DDF: ${OUTPUT}"
        echo "                          Format: ${FORMAT}"
        echo "                         Scaling: $scale"
endif
        echo '   '

if( -e hist.txt ) /bin/rm hist.txt
touch hist.txt
echo $EXPDSC >> hist.txt
echo $ALIAS  >> hist.txt
echo $OUTPUT >> hist.txt
echo $scale  >> hist.txt
echo $FORMAT >> hist.txt
echo $BASE   >> hist.txt


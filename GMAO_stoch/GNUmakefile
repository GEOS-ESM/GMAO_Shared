#
# Makefile for ESMA components.
#
# REVISION HISTORY:
#
# 3mar2004  Zaslavsky  Initial imlementation.
# 20Oct2004  da Silva  Standardization
#

# Make sure ESMADIR is defined
# ----------------------------
ifndef ESMADIR
       ESMADIR := $(PWD)/../../..
endif

# Compilation rules, flags, etc
# -----------------------------
  include $(ESMADIR)/Config/ESMA_base.mk  # Generic stuff
  include $(ESMADIR)/Config/ESMA_arch.mk  # System dependencies
  include $(ESMADIR)/Config/GMAO_base.mk  # System dependencies

#                  ---------------------
#                  Standard ESMA Targets
#                  ---------------------

esma_help help:
	@echo "Standard ESMA targets:"
	@echo "% make esma_install    (builds and install under ESMADIR)"
	@echo "% make esma_clean      (removes deliverables: *.[aox], etc)"
	@echo "% make esma_distclean  (leaves in the same state as cvs co)"
	@echo "% make esma_doc        (generates PDF, installs under ESMADIR)"
	@echo "% make esma_help       (this message)"
	@echo "Environment:"
	@echo "      ESMADIR = $(ESMADIR)"
	@echo "      BASEDIR = $(BASEDIR)"
	@echo "         ARCH = $(ARCH)"
	@echo "         SITE = $(SITE)"
	@echo "        FREAL = $(FREAL)"

THIS := $(shell basename `pwd`)
LIB  = lib$(THIS).a
BIN  = #stochprog.x

ALLDIRS = scripts

SUBDIRS = $(wildcard $(ALLDIRS) )

TARGETS = esma_install esma_clean esma_distclean esma_doc \
          install clean doc

export ESMADIR BASEDIR ARCH SITE

$(TARGETS): 
	@ t=$@; argv="$(SUBDIRS)" ;\
	  for d in $$argv; do                    \
	    ( cd $$d                            ;\
	      echo ""; echo Making $$t in `pwd`          ;\
	      $(MAKE) -e $$t ) \
	  done
	$(MAKE) local_$@

local_esma_install local_install: $(LIB) $(BIN)
	$(MKDIR) $(ESMALIB) $(ESMAETC) $(ESMAINC)/$(THIS) $(ESMABIN)
	$(CP) $(LIB) $(ESMALIB)
	$(CP) -p *.[Mm][Oo][Dd] $(ESMAINC)/$(THIS)

local_esma_clean local_clean:
	$(RM) *~ *.[aox] *.[Mm][Oo][Dd]

local_esma_distclean local_distclean distclean:
	$(RM) *~ *.[aoxd] *.[Mm][Oo][Dd]

local_esma_doc local_doc:
	@echo "Target $@ not implemented yet in `pwd`"


#                  --------------------
#                  User Defined Targets
#                  --------------------

SRCS_GEOS := stochprog.F90

libpresence := $(shell ls $(LIB_HERMES))
ifeq ( $(wildcard $(libpresence)),$(null) )
   SRCS_GEOS := 
   LIB_HERMES := 
   LIB_GFIO := 
   INC_HERMES := 
   LIB_SDF :=
   SRCS_XTRA := $(SRCS_GFS)
   LIBS_ALL = $(LIB_SIGIO) $(LIB_SFCIO)  $(LIB_SP)
else
   SRCS_XTRA := $(SRCS_GEOS)
   LIBS_ALL = $(LIB_HERMES) $(LIB_TRANSF) $(LIB_GFIO)  $(LIB_SP)
   BIN  = stochprog.x
endif


SRCS := epslon.f90            \
	gauss2grd.f90         \
	get_ls_node.f         \
	get_pattern.f90       \
	glats.f               \
	grd_xform.F90         \
	gozrineo.f            \
	initialize.F90        \
	mersenne_twister.f    \
	mod_four.F90          \
	mod_uvdz.F90          \
	mod_param.F90         \
	mpi_more.f            \
	num_parthd.f90        \
	patterngenerator.f90  \
	pln2eo.f              \
	setlats.f             \
	stochmain.f90         \
	stoch_data.f90        \
	stoch_module.F90      \
	wrap_fftpack.f        


OBJS := $(addsuffix .o, $(basename $(SRCS)))
DEPS := $(addsuffix .d, $(basename $(OBJS)))

FREAL = $(FREAL8)
ifneq ("$(BOPT)","g")
   FOPT = -O1 #$(TRACEBACK) #$(FOPT3)
endif
#FPE = -fpe0  $(TRACEBACK)
FPE =  $(TRACEBACK)

# VERY IMPORTANT NOTE: 
#  The program generated by this makefile only works fully when FV2 is loaded. When FV3 is loaded
#  instead, only the latlon capabilities work (that is, mkiau.x will only be able to create a lat/lon
#  IAU increment. It needs FV2 to work on the cubed-sphere grid.
#ifeq ($(wildcard $(ESMALIB)/libfvdycore_v2.a),$(null))
ifeq ($(wildcard $(ESMALIB)/libfvdycore.a),$(null))
   MOD_DIRS = . $(INC_GEOS_FV2) $(INC_GEOS_MKIAU) $(INC_GEOS_SHARED) $(INC_HERMES) $(INC_MPEU) $(INC_MAPL_BASE) $(INC_SDF) $(INC_ESMF) $(INC_CFIO)
   INC_DIRS = . $(MOD_DIRS)
   LIB_FV2  = $(wildcard $(ESMALIB)/libGEOSdynamicsPert_GridComp.a \
                         $(ESMALIB)/libfvdycore_v2.a )
   LIB_FMS  = 
   LIB_FV   = $(LIB_FV2) stoch_ll2cc_stubs.o
else
   MOD_DIRS = . $(INC_GEOS_FV3) $(INC_GEOS_MKIAU) $(INC_GEOS_SHARED) $(INC_HERMES) $(INC_MPEU) $(INC_MAPL_BASE) $(INC_SDF) $(INC_ESMF) $(INC_CFIO)
   INC_DIRS = . $(MOD_DIRS)
   LIB_FV3 = $(ESMALIB)/libFVdycoreCubed_GridComp.a $(ESMALIB)/libfvdycore.a
   LIB_FV  = stoch_ll2cc_stubs.o $(LIB_FV3) \
             $(ESMALIB)/libGFDL_fms.a                        
endif

THIS_SP   = NCEP_sp_r8i4
THIS_CFIO = MAPL_cfio_r4

MOD_DIRS = . $(INC_SIGIO) $(INC_SFCIO) $(INC_HERMES) $(INC_TRANSF) $(INC_MPEU) $(INC_MAPL_BASE) $(INC_SDF) $(INC_ESMF) $(INC_MPI) $(INC_SP) $(INC_CFIO) 
USER_FFLAGS = $(BIG_ENDIAN)
USER_FMODS  = $(foreach dir,$(MOD_DIRS),$(M)$(dir)) 
USER_FINCS  = $(foreach dir,$(MOD_DIRS),$(I)$(dir)) 

# if you may need MPI
_Lmp	 = $(foreach lib,$(LIBS_ALL) $(LIB_MPEU),-L`dirname $(lib)` -l`basename $(lib) .a|sed -e's/^lib//'`) 
# if you don't need or don't have a MPI implementation
_Leu	 = $(foreach lib,$(LIBS_ALL) $(LIB_EU)  ,-L`dirname $(lib)` -l`basename $(lib) .a|sed -e's/^lib//'`) 

vpath % $(MOD_DIRS)

$(LIB) lib : $(DEPS) $(OBJS)
	$(RM) $(LIB)
	$(AR) $(AR_FLAGS) $(LIB) $(OBJS)

all: $(BIN)

stochprog.x:  $(LIB) stochprog.o 
	$(LD) $(LDFLAGS) $(FPE) -o $@ stochprog.o $(LIB) $(_Lmp) \
	 $(LIB_MAPL_BASE) \
	 $(LIB_FV) \
	 $(LIB_GEOS_SHARED) \
	 $(LIB_HERMES)    \
	 $(LIB_MAPL_BASE) \
	 $(LIB_GMAO_pFIO) \
	 $(LIB_CFIO) $(LIB_GFIO) $(LIB_MPEU) \
	 $(LIB_ESMF) $(LIB_SDF) \
	 $(LIB_SCI) $(LIB_SYS) $(LIB_MPI)

#	$(LD) $(LDFLAGS) $(FPE) -o $@ stochprog.o $(_Lmp) $(LIB_SCI) $(LIB_SDF) $(LIB_SYS) $(LIB_SP) $(LIB_MPEU) $(LIB_CFIO) $(LIB_MAPL_BASE) $(LIB_ESMF)


# Hack to prevent remaking dep files during cleaning
# --------------------------------------------------
  ifneq ($(findstring clean,$(MAKECMDGOALS)),clean)
    -include $(DEPS)
  endif

  -include $(ESMADIR)/Config/ESMA_post.mk  # ESMA additional targets, macros

#.
